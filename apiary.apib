FORMAT: 1A
HOST: http://localhost:5000/

# GameScoresAPI

GameScores API is a web API that stores game score data. The API serves JSON data extended by the [Mason hypermedia format](https://github.com/JornWildt/Mason). Custom link relations and resource profiles have been included in this API document - they are not resources.

# Group Link Relations

This section described custom link relations defined in this API. These are not resources. The API also uses
[IANA link relations](http://www.iana.org/assignments/link-relations/link-relations.xhtml) where applicable. Custom link relations are CURIEs that use the gamsco prefix.

## add-person

This is a control that is used to add a person to the associated collection resource. The control includes a JSON schema and must be accessed with POST.

## add-match

This is a control that is used to add a match to the associated collection. The control includes a JSON schema and must be accessed with POST.

## add-game

This is a control that is used to add a game to the associated collection. The control includes a JSON schema and must be accessed with POST.

## matches-all

Leads to the root level matches collection which is a list of all matches known to the API. This collection can be sorted using query parameters as described in the resource documentation.

## games-all

Leads to the root level games collection which is a list of all games known to the API. This collection can be sorted using query parameters as described in the resource documentation.

## item

Leads to a item from the collection from which its called.

## game

Leads to game item from match or player item

## participant

Leads to person item from match item

## match

Leads to match item from person or game item

## game

Leads to match item from person or game item

## hobbyist

Leads to Game item from person

## delete

Deletes the associated resource. Must be accessed with DELETE

## edit

Edits the associated resource. Must be accessed with EDIT

## add

Add the associated resource. Must be accessed with add-person, add-match or add-game

# Group Profiles

This section includes resource profiles which provide semantic descriptions for the attributes of each resource, as well as the list of controls (by link relation) available from that resource.

## Games Profile

Profile definition for all games related resources.

### Link Relations

This section lists all possible link relations associated with Games;
not all of them are necessarily present on each resource type. The following link
relations from the gamsco namespace are used:

 * [add-game](reference/link-relations/add-game)
 * [matches-all](reference/link-relations/matches-all)
 * [hobbyist](reference/link-relations/hobbyist)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * profile
 * self
 * collection
 * edit


### Semantic Descriptors

#### Data Type Game

 * `id`: The game id is primary key. Mandatory.
 * `name`: The game name as it is written, including capitalization and punctuation. Data type is string. Game name is unique, and it is mandatory.
 * `score_type`: Score type of the game. It tells how the game is won. Either by smaller score or bigger score player wins. Type is integer. Mandatory.
 * `matches`: matches connects Game class to Match class.
 * `hobbyist`: hobbyist connects Game class to Person class.


## Match Profile

Profile definition for all match related resources.

### Link Relations

This section lists all possible link relations associated with match; not all of them are necessarily present on each resource type. The following link relations from the gamsco namespace are used:

 * [add-match](reference/link-relations/add-match)
 * [participant](reference/link-relations/participant)
 * [game](reference/link-relations/game)
 * [delete](reference/link-relations/delete)


The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * collection
 * edit
 * profile
 * self
 * up

### Semantic Descriptors

#### Data Type Match

 * `id`: The unique match id. integer, primary key. Mandatory
 * `game`: The games name as it is written on the release, including capitalization and punctuation. Data type is string and it is used as a foreign key to game.
 * `place`: Location where the match is/was played. Optional.
 * `time`: The time that the match was played, including capitalization and pucntuation. Time is in form of [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html) (YYYY-MM-DD). Use 01 for month or day if not known. Mandatory.
 * `player1_id`: id of one of the players in a match. foreign key, integer, mandatory
 * `player2_id`: id of another player in a match. foreign key, integer, mandatory
 * `player1_score`: score of the first player. integer, mandatory
 * `player2_score`: score of the second player. integer, mandatory
 * `comment`: Custom comment for the game. string. Optional
 * `games`: games connects Match class to Game class.
 * `person`: person connects Match class to Person class. player1_id works as a foreign key.
 * `person2`: person2 connects Match class to Game class. player2_id works as a foreign key.


## Person Profile

Profile definition for all Person related resources.

### Link Relations

This section lists all possible link relations associated with person; not all of them are necessarily present on each resource type. The following link relations from the gamsco namespace are used:

 * [add-person](reference/link-relations/add-person)
 * [matches-all](reference/link-relations/matches-all)
 * [delete](reference/link-relations/delete)


The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * collection
 * edit
 * self
 * profile


### Semantic Descriptors

#### Data Person

 * `username`: The persons username as it is written on the release, including capitalization and punctuation. Titles are unique per artist, and are used to address album resources. Mandatory.
 * `first_name`: The persons first name, string. Mandatory.
 * `last_name`: The persons last name, string. Mandatory
 * `birthdate`: The persons date of birth.  Time is in form of [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html) (YYYY-MM-DD). Use 01 for month or day if not known.
 * `description`: Custom description for the person, string. Optional
 * `game`: relationship to the game collection.

## Error Profile

Profile definition for all errors returned by the API. See [Mason error control](https://github.com/JornWildt/Mason/blob/master/Documentation/Mason-draft-2.md#property-name-error) for more information about errors.

+ Attributes

    + resource_url (string, required) - URI of the resource the error was generated from.






# Group Entry

This group contains the entry point of the API

## Entry Point [/api/]

### Get entry point [GET]

Get the API entry point

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "@namespaces": {
                    "gamsco": {
                        "name": "/gamescores/link-relations#"
                    }
                },
                "@controls": {
                    "gamsco:persons-all": {
                        "href": "/api/albums/"
                    },
                    "gamsco:artists-all": {
                        "href": "/api/artists/"
                    }
                }
            }


# Group Albums

All of these resources use the [Album Profile](reference/profiles/album-profile). In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## Games Collection [/api/games/?sortby={field}]

A list of all games known to the API. This collection can be sorted using the sortby query parameter. For each game only player name and title is included, more information can be found by following the `self` relation of each game. Games cannot be directly added to this collection, it only supports GET.

+ Parameters

    + field (string, optional) - Field to use for sorting

        + Default: `title`
        + Members

            + `artist`
            + `title`
            + `genre`
            + `release`

### List all games [GET]

Get a list of all games known to the API.

+ Relation: games-all
+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "@namespaces": {
                    "gamsco": {
                        "name": "/gamescores/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/games/"
                    },
                    "gamsco:persons-all": {
                        "href": "/api/persons/",
                        "title": "All persons"
                    },
                },
                "items": [
                    {
                        "name": "Tennis",
                        "score_type": "1",
                        "@controls": {
                            "self": {
                                "href": "/api/artists/scandal/Hello World/"
                            },
                            "profile": {
                                "href": "/profiles/game/"
                            }
                        },
                    },
                ]
            }

## Games by person [/api/artists/{artist}/albums/]

This is an game collection by given person using the persons unique id. For each game only id, person and score type is included, more information can be found by following the `self` relation of each game. games played by this person can be added to this collection.

+ Parameters

    + person: Matti (string) - artist's unique name (unique_name)

### List games by artist [GET]

Get a list of albums by an artist.

+ Relation: albums-by
+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "@namespaces": {
                    "gamsco": {
                        "name": "/gamescores/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/artists/scandal/albums/"
                    },
                    "gamsco:artists-all": {
                        "href": "/api/artists/",
                        "title": "All artists"
                    },
                    "gamsco:albums-all": {
                        "href": "/api/albums/?{sortby}",
                        "title": "All albums",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sortby": {
                                    "description": "Field to use for sorting",
                                    "type": "string",
                                    "default": "title",
                                    "enum": ["artist", "title", "genre", "release"]
                                }
                            },
                            "required": []
                        }
                    },
                    "author": {
                        "href": "/api/artists/scandal/"
                    },
                    "gamsco:add-album": {
                        "href": "/api/artists/scandal/albums/",
                        "title": "Add a new album for this artist",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "Album title",
                                    "type": "string"
                                },
                                "release": {
                                    "description": "Release date",
                                    "type": "string",
                                    "pattern": "^[0-9]{4}-[01][0-9]-[0-3][0-9]$"
                                },
                                "genre": {
                                    "description": "Album's genre(s)",
                                    "type": "string"
                                },
                                "discs": {
                                    "description": "Number of discs",
                                    "type": "integer",
                                    "default": 1
                                }
                            },
                            "required": ["title", "release"]
                        }
                    }
                },
                "items": [
                    {
                        "title": "Hello World",
                        "artist": "Scandal",
                        "@controls": {
                            "self": {
                                "href": "/api/artists/scandal/albums/Hello World/"
                            },
                            "profile": {
                                "href": "/profiles/album/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to retrieve list of albums for an artist that doesn't exist.

    + Body


            {
                "resource_url": "/api/artists/hemuli/albums/",
                "@error": {
                    "@message": "Artist not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Add album for artist [POST]

Adds a new album for the artist. The album representation must be valid against the album schema.

+ Relation: add-album
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "title": "Best Scandal",
                "release": "2009-10-21",
                "genre": "Pop Rock",
                "discs": 1
            }

+ Response 201

    + Headers

            Location: /api/artists/scandal/albums/Best Scandal/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": [
                        "'release' is a required property

                        Failed validating 'required' in schema:
                        {'properties': {'discs': {'default': 1,
                        'description': 'Number of discs',
                        'type': 'integer'},
                        'genre': {'description': \"Album's genre(s)\",
                        'type': 'string'},
                        'release': {'description': 'Release date',
                        'pattern': '^[0-9]{4}-[01][0-9]-[0-3][0-9]$',
                        'type': 'string'},
                        'title': {'description': 'Album title',
                        'type': 'string'}},
                        'required': ['title', 'release'],
                        'type': 'object'}

                        On instance:
                        {'title': 'Best Scandal'}"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to add an album for an artist that doesn't exist.

    + Body

            {
                "resource_url": "/api/artists/hemuli/albums/",
                "@error": {
                    "@message": "Artist not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add an album with a title that's already used by another album for the same artist.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Artist 'scandal' already has album with title 'Hello World'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }


+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Album [/api/artists/{artist}/albums/{title}/]

This resource represents an album by a single artist, as identified by the artist's unique name and the albm's title. It includes the list of tracks on the album in addition to the album's own metadata. Individual tracks are usually only visited when modifying their data. They use the [Track Profile](/reference/profiles/track-profile).

+ Parameters

    + artist: scandal (string) - artist's unique name (unique_name)
    + title: Hello World (string) - album's title


### Album information [GET]

Get the album representation.

+ Relation: self
+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "@namespaces": {
                    "gamsco": {
                        "name": "/gamescores/link-relations#"
                    }
                },
                "title": "Hello World",
                "release": "2014-12-03",
                "genre": "Pop Rock",
                "discs": 1,
                "artist": "Scandal",
                "@controls": {
                    "author": {
                        "href": "/api/artists/scandal/"
                    },
                    "gamsco:albums-by": {
                        "href": "/api/artists/scandal/albums/"
                    },
                    "self": {
                        "href": "/api/artists/scandal/albums/Hello World/"
                    },
                    "profile": {
                        "href": "/profiles/album/"
                    },
                    "collection": {
                        "href": "/api/albums/"
                    },
                    "gamsco:artists-all": {
                        "href": "/api/artists/",
                        "title": "All artists"
                    },
                    "gamsco:add-track": {
                        "href": "/api/artists/scandal/albums/Hello World/",
                        "title": "Add a track to this album",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "Track title",
                                    "type": "string"
                                },
                                "disc_number": {
                                    "description": "Disc number",
                                    "type": "integer",
                                    "default": 1
                                },
                                "track_number": {
                                    "description": "Track number on disc",
                                    "type": "integer"
                                },
                                "length": {
                                    "description": "Track length",
                                    "type": "string",
                                    "pattern": "^:[0-9]{2}:[0-5][0-9]:[0-5][0-9]$"
                                }
                            },
                            "required": ["title", "track_number", "length"]
                        }
                    },
                    "edit": {
                        "href": "/api/artists/scandal/albums/Hello World/",
                        "title": "Edit this album",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "Album title",
                                    "type": "string"
                                },
                                "release": {
                                    "description": "Release date",
                                    "type": "string",
                                    "pattern": "^[0-9]{4}-[01][0-9]-[0-3][0-9]$"
                                },
                                "genre": {
                                    "description": "Album's genre(s)",
                                    "type": "string"
                                },
                                "discs": {
                                    "description": "Number of discs",
                                    "type": "integer",
                                    "default": 1
                                }
                            },
                            "required": ["title", "release"]
                        }
                    },
                    "gamsco:delete": {
                        "href": "/api/artists/scandal/albums/Hello World/",
                        "title": "Delete this album",
                        "method": "DELETE"
                    }
                },
                "items": [
                    {
                        "title": "Image",
                        "length": "00:04:26",
                        "disc_number": 1,
                        "track_number": 1,
                        "@controls": {
                            "self": {
                                "href": "/api/artists/scandal/albums/Hello World/1/1/"
                            },
                            "profile": {
                                "href": "/profiles/track/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an album that doesn't exist (either due to non-existent artist or album).

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Yellow/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Add track to album [POST]

Adds a new track to the album. The track representation must be valid against the track schema. Also its position on the album (combination of disc number and track number) must be unoccupied.

+ Relation: add-track
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "title": "Your Song",
                "disc_number": 1,
                "track_number": 2,
                "length": "00:03:43"
            }

+ Response 201

    + Headers

            Location: /api/artists/scandal/albums/Hello World/1/2/

    + Body

            {}



+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Hello World/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": [
                        "'3:43' does not match '^[0-9]{2}:[0-5][0-9]:[0-5][0-9]$'

                        Failed validating 'pattern' in schema['properties']['length']:
                        {'description': 'Track length',
                        'pattern': '^[0-9]{2}:[0-5][0-9]:[0-5][0-9]$',
                        'type': 'string'}

                        On instance
                        ['length']: '3:43'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to add a track to an album that doesn't exist (due to non-existent artist or album).

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Yellow/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add a track with a combination of disc and track numbers that is already occupied.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Hello World/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Album 'Hello World' already has a track at 1.1"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }


+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Hello World/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Edit album information [PUT]

Replace the album's representation with a new one. Missing optinal fields will be set to null. Must validate against the album schema.

+ Relation: edit
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "title": "Hello World",
                "release": "2014-12-03",
                "genre": "Pop Rock, Power Pop",
                "discs": 1
            }

+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Hello World/",
                "@error": {
                    "@message": "Invalid date format",
                    "@messages": [
                        "Release date must be written in ISO format (YYYY-MM-DD)"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an album that doesn't exist (due to non-existent artist or album).

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Yellow/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to change the album's title to a one that is already in use for the artist.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Honey/",
                "@error": {
                    "@message": "Title reserved",
                    "@messages": [
                        "Artist 'scandal' already has another album with title 'Hello World'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Hello World/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete album [DELETE]

Deletes the album, and all associated tracks.

+ Relation: delete
+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an album that doesn't exist (due to non-existent artist or album).

    + Body

            {
                "resource_url": "/api/artists/scandal/albums/Yellow/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }


### Album information [GET]

Get the album's representation.

+ Relation: self
+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "@namespaces": {
                    "gamsco": {
                        "name": "/gamescores/link-relations#"
                    }
                },
                "title": "Thorns vs Emperor",
                "release": "1999-01-01",
                "genre": "Black Metal",
                "discs": 1,
                "artist": "VA",
                "@controls": {
                    "gamsco:albums-va": {
                        "href": "/api/artists/VA/albums/",
                        "title": "All VA albums"
                    },
                    "self": {
                        "href": "/api/artists/VA/albums/Thorns vs Emperor/"
                    },
                    "profile": {
                        "href": "/profiles/album/"
                    },
                    "collection": {
                        "href": "/api/albums/"
                    },
                    "gamsco:artists-all": {
                        "href": "/api/artists/",
                        "title": "All artists"
                    },
                    "gamsco:add-track": {
                        "href": "/api/artists/VA/albums/Thorns vs Emperor/",
                        "title": "Add a track to this album",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "Track title",
                                    "type": "string"
                                },
                                "disc_number": {
                                    "description": "Disc number",
                                    "type": "integer",
                                    "default": 1
                                },
                                "track_number": {
                                    "description": "Track number on disc",
                                    "type": "integer"
                                },
                                "length": {
                                    "description": "Track length",
                                    "type": "string",
                                    "pattern": "^:[0-9]{2}:[0-5][0-9]:[0-5][0-9]$"
                                },
                                "va_artist": {
                                    "description": "Track artist unique name (mandatory on VA albums)",
                                    "type": "string"
                                }
                            },
                            "required": ["title", "track_number", "length", "va_artist"]
                        }
                    },
                    "edit": {
                        "href": "/api/artists/VA/albums/Thorns vs Emperor/",
                        "title": "Edit this album",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "Album title",
                                    "type": "string"
                                },
                                "release": {
                                    "description": "Release date",
                                    "type": "string",
                                    "pattern": "^[0-9]{4}-[01][0-9]-[0-3][0-9]$"
                                },
                                "genre": {
                                    "description": "Album's genre(s)",
                                    "type": "string"
                                },
                                "discs": {
                                    "description": "Number of discs",
                                    "type": "integer",
                                    "default": 1
                                }
                            },
                            "required": ["title", "release"]
                        }
                    },
                    "gamsco:delete": {
                        "href": "/api/artists/VA/albums/Thorns vs Emperor/",
                        "title": "Delete this album",
                        "method": "DELETE"
                    }
                },
                "items": [
                    {
                        "title": "Exördium",
                        "length": "00:03:00",
                        "disc_number": 1,
                        "track_number": 1,
                        "va_artist": "Emperor",
                        "@controls": {
                            "self": {
                                "href": "/api/artists/VA/albums/Thorns vs Emperor/1/1/"
                            },
                            "profile": {
                                "href": "/profiles/track/"
                            }
                        }
                    },
                    {
                        "title": "Aerie Descent",
                        "length": "00:08:34",
                        "disc_number": 1,
                        "track_number": 2,
                        "va_artist": "Thorns",
                        "@controls": {
                            "self": {
                                "href": "/api/artists/VA/albums/Thorns vs Emperor/1/2/"
                            },
                            "profile": {
                                "href": "/profiles/track/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to get an album that doesn't exist.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Transcendental/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }


### Add track to album [POST]

Adds a new track to the album. The track representation must be valid against the track schema. Also its position on the album (combination of disc number and track number) must be unoccupied. Note that VA tracks have the additional required field `va_artist` which indicates the track's author.

+ Relation: add-track
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "title": "I am",
                "disc_number": 1,
                "track_number": 3,
                "length": "00:05:04",
                "va_artist": "emperor"
            }

+ Response 201

    + Headers

            Location: /api/artists/VA/albums/Thorns vs Emperor/1/2/


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Thorns vs Emperor/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": [
                        "'5:04' does not match '^[0-9]{2}:[0-5][0-9]:[0-5][0-9]$'

                        Failed validating 'pattern' in schema['properties']['length']:
                        {'description': 'Track length',
                        'pattern': '^[0-9]{2}:[0-5][0-9]:[0-5][0-9]$',
                        'type': 'string'}

                        On instance
                        ['length']: '5:04'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to add a track for an album that doesn't exist.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Xenogears/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add a track with a combination of disc and track numbers that is already occupied.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Thorns vs Emperor/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Album 'Thorns vs Emperor' already has a track at 1.1"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Thorns vs Emperor/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Edit album information [PUT]

Replace the album's representation with a new one. Missing optinal fields will be set to null. Must validate against the album schema.

+ Relation: edit
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "title": "Thorns vs Emperor",
                "release": "1999-01-01",
                "genre": "Industrial Black Metal",
                "discs": 1
            }

+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Thorns vs Emperor/",
                "@error": {
                    "@message": "Invalid date format",
                    "@messages": [
                        "Release date must be written in ISO format (YYYY-MM-DD)"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to modify an album that doesn't exist.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Transcendental/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to change the title to a one that is already in use.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Yogsothery/",
                "@error": {
                    "@message": "Title reserved",
                    "@messages": [
                        "Artist 'VA' already has another album with title 'Thorns vs Emperor'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Thorns vs Emperor/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete album [DELETE]

+ Relation: delete
+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an album that doesn't exist.

    + Body

            {
                "resource_url": "/api/artists/VA/albums/Transcendental/",
                "@error": {
                    "@message": "Album not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }